class Server {
private:
    int port;
    int sock;
    std::vector<int> client_socks;
    std::ofstream log_file;

    void accept_connections() {
        while (true) {
            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            int client_sock = accept(sock, (struct sockaddr *)&addr, &addr_size);
            if (client_sock < 0) {
                std::cerr << "Error accepting client" << std::endl;
                continue;
            }

            std::thread t(&Server::handle_client, this, client_sock);
            t.detach();
            client_socks.push_back(client_sock);
        }
    }

    void handle_client(int client_sock) {
        char buffer[1024];
        while (true) {
            ssize_t bytes_received = recv(client_sock, buffer, sizeof(buffer), 0);
            if (bytes_received <= 0) {
                break;
            }

            std::string message(buffer, bytes_received);
            log_file << message << std::endl;
            log_file.flush();
        }

        close(client_sock);
        auto it = std::find(client_socks.begin(), client_socks.end(), client_sock);
        if (it != client_socks.end()) {
            client_socks.erase(it);
        }
    }

public:
    Server(int port) : port(port), log_file("log.txt") {
        sock = socket(AF_INET, SOCK_STREAM, 0);
        if (sock < 0) {
            std::cerr << "Error creating socket" << std::endl;
            exit(1);
        }

        struct sockaddr_in addr;
        addr.sin_family = AF_INET;
        addr.sin_port = htons(port);
        addr.sin_addr.s_addr = INADDR_ANY;

        if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {
            std::cerr << "Error binding socket" << std::endl;
            exit(1);
        }

        if (listen(sock, 5) < 0) {
            std::cerr << "Error listening on socket" << std::endl;
            exit(1);
        }

        std::thread t(&Server::accept_connections, this);
        t.detach();
    }
};

int main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <port>" << std::endl;
        return 1;
    }

    int port = std::stoi(argv[1]);

    Server server(port);

    while (true) {
        std::this_thread::sleep_for(std::chrono::hours(1));
    }

    return 0;
}
