
using AdPlatformService;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
//Xunit хотел использовать но нет времени разбираться почему не работают  они у меня.
//В тестировании важнее суть и результат  а не инструменты поэтому переписал все под класс по тупому
//в идеале нужно разделить тесты на классы и тестировать каждый класс отдельно. 
//в целом тесты не успел написать идеально поэтому покрытие может быть не совсем ровным и логичным
// тут пристуствуют типы тестов следущие Юнит-тесты, Интеграционные тесты, Функциональные тесты, Системные тесты
//Опущены Нагрузочные тесты(нужно огромное количество данных нагенерироовать более менее разнобразных и адекватных) 
//и тесты производительности(для этого мне придется писать альтернативную версию программы с более плохими алгоритмами чтобы доказать что мой код быстрее,  для чего мне не хватает времени в данный момент)
//тут если поиск не через префиксное дерево программа тем медленнее работает тем у нее больше база, поэтому тесты на производительности в каком-то смысле бесмысленны если алгоритм поиска плохой изначально 


namespace AdPlatformService.Tests
{
    public class AdPlatformTests
    {

        public void RunningAllTheTests()
        {
            bool result = true;
            result = CHeckingThePlatformSearch();
            Console.ForegroundColor = ConsoleColor.Red;
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = CheckLocationValidation();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = СheckingTheLoadingOfAnInvalidString();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = CheckingTheLocationInsertionMethod();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = CheckingMethodInsertingLocationWithEmptyString();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = CheckingWhetherMethodReturnsAllPlatforms();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = CheckingSearchingNonExistentLocation();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            result = CheckingSearchEmptyLocationReturnsEmptyArray();
            if (!result)
            {
                Console.WriteLine("Нужно доработать программу");
                Console.ResetColor();
                return;
            }
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Все тесты пройдены положительно");
            Console.ResetColor();
        } 

        private bool CHeckingThePlatformSearch()
        {
            var repository = new AdPlatformRepository();
            string testFilePath = "testPlatforms.txt";
            File.WriteAllText(testFilePath, "Яндекс.Директ:/ru\r\n" +
            "Ревдинский рабочий:/ru/svrd/revda,/ru/svrd/pervik\r\n" +
            "Газета уральских москвичей:/ru/msk,/ru/permobl,/ru/chelobl\r\n" +
            "Крутая реклама:/ru/svrd\r\nМосковский медиацентр:/ru/msk/center\r\n" +
            "Питерская реклама:/ru/spb/center,/ru/spb/north\r\n" +
            "Уральский охват:/ru/ekb/center,/ru/ekb/south,/ru/chely/center\r\n" +
            "Сибирский маркет:/ru/nov/center,/ru/omsk/center,/ru/krasnoyarsk/center,/ru/krasnoyarsk/east\r\n" +
            "Казанский канал:/ru/kzn/center");

            repository.LoadPlatforms(testFilePath);
          
            var search = new AdPlatformSearch(repository);
            var platforms = search.GetPlatformsForLocation("/ru");
            if (!platforms.Contains("Яндекс.Директ"))
            {
                Console.WriteLine("Яндекс.Директ не найден");
                return false;
            }
            if (platforms.Contains("Ревдинский рабочий"))
            {
                Console.WriteLine("Ошибка, Ревдинский рабочий найден");
                return false;
            }
                return true;
        }

    private bool CheckLocationValidation()
    {
        Dictionary<string, bool> testCases = new Dictionary<string, bool>
            {
                { "/ru", true },
                { "/ru/svrd/revda", true },
                { "/ru//svrd", false },
                { "/ru/", false },
                { "ru", false },
                { "//ru", false }
            };
        foreach (var pair in testCases)
        {
            var result = Program.IsValidInput(pair.Key);
            if (pair.Value != result)
        {
            Console.WriteLine($"функция проверки валидности для {pair.Key} дала некорректный результат");
            return false;
        }
    }
        return true;
    }

    private bool СheckingTheLoadingOfAnInvalidString()
    {
        var repository = new AdPlatformRepository();
        string testFilePath = "invalidFormat.txt";
        File.WriteAllText(testFilePath, "Яндекс.Директ/ru\r\n" +
        "Ревдинский рабочий:/ru/svrd/revda,/ru/svrd/pervik");

        repository.LoadPlatforms(testFilePath);

        if (!repository._IsLoaded) {
            Console.WriteLine("Результат некорректный приложение загрузило невалидный файл");
            return false;
        }
        return true;
    }
    

    private bool CheckingTheLocationInsertionMethod()
    {
        var repository = new AdPlatformRepository();
        repository.InsertLocation("/ru", "Яндекс.Директ");

        var search = new AdPlatformSearch(repository);
        var platforms = search.GetPlatformsForLocation("/ru");

    if (platforms.Count != 1)
    {
        Console.WriteLine("Размер массива некорректный");
        return false;
    }
    if ("Яндекс.Директ" != platforms.First())
    {
        Console.WriteLine("Строка не равна загруженной");
        return false;
    }
    return true;
}

    private bool CheckingMethodInsertingLocationWithEmptyString()
    {
    var repository = new AdPlatformRepository();
    repository.InsertLocation("", "Яндекс.Директ");

    var search = new AdPlatformSearch(repository);
    var platforms = search.GetPlatformsForLocation("");

    if (platforms.Count != 1)
    {
        Console.WriteLine("Размер массива должен быть один ");
        return false;
    }
    return true;
    }
    

    private bool CheckingWhetherMethodReturnsAllPlatforms()
    {
        var repository = new AdPlatformRepository();
        repository.InsertLocation("/ru", "Яндекс.Директ");
        repository.InsertLocation("/ru/svrd", "Ревдинский рабочий");

        var search = new AdPlatformSearch(repository);
        var platforms = search.GetPlatformsForLocation("/ru/svrd");


        if (!platforms.Contains("Ревдинский рабочий"))
        {
            Console.WriteLine("Контейнер не содержит Ревдинский рабочий");
            return false;
        }
        if (!platforms.Contains("Яндекс.Директ"))
        {
            Console.WriteLine("Контейнер не содержит Яндекс.Директ");
            return false;
        }
        return true;
    }

    private bool CheckingSearchingNonExistentLocation()
    {
        var repository = new AdPlatformRepository();
        repository.InsertLocation("/ru", "Яндекс.Директ");

        var search = new AdPlatformSearch(repository);
        var platforms = search.GetPlatformsForLocation("/nonExisting");


        if (platforms.Count > 0)
        {
            Console.WriteLine("Размер массива должен быть нулевым");
            return false;
        }
        return true;
    }

    private bool CheckingSearchEmptyLocationReturnsEmptyArray()
    {
        var repository = new AdPlatformRepository();
        repository.InsertLocation("/ru", "Яндекс.Директ");

        var search = new AdPlatformSearch(repository);
        var platforms = search.GetPlatformsForLocation("");


        if (platforms.Count > 0)
        {
            Console.WriteLine("Размер массива должен быть ноль");
            return false;
        }
        return true;
    }
    }
}
